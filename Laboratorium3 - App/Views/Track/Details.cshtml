


@model TrackDetailsViewModel


<div class="container mt-5 text-light">
    
    <div class="row justify-content-center">
       


        <div class="col-md-7">

            @if (ViewBag.PlaylistId != null)
            {
                <a class="back" asp-action="Details" asp-controller="Playlist" asp-route-id="@ViewBag.PlaylistId">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-left" viewBox="0 0 16 16">
                        <path fill-rule="evenodd" d="M15 8a.5.5 0 0 0-.5-.5H2.707l3.147-3.146a.5.5 0 1 0-.708-.708l-4 4a.5.5 0 0 0 0 .708l4 4a.5.5 0 0 0 .708-.708L2.707 8.5H14.5A.5.5 0 0 0 15 8" />
                    </svg>
                    Powrót
                </a>
            }
            else
            {
                <a class="back" asp-action="Index" asp-controller="Playlist">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-left" viewBox="0 0 16 16">
                        <path fill-rule="evenodd" d="M15 8a.5.5 0 0 0-.5-.5H2.707l3.147-3.146a.5.5 0 1 0-.708-.708l-4 4a.5.5 0 0 0 0 .708l4 4a.5.5 0 0 0 .708-.708L2.707 8.5H14.5A.5.5 0 0 0 15 8" />
                    </svg>
                    Powrót
                </a>
            }
           
            
            <div class="top">
            <div class="topflex">

                <div class="leftTop">
                    <img src="/images/playlist.webp" />
                </div>

                <div class="rightTop">
                    <p><strong>Artysta:</strong> @Model.BandOrArtist</p>
                    <p><strong>Czas trwania:</strong> @Model.Duration</p>
                    <p><strong>Gatunek:</strong> @Model.Genre</p>

                        


                    
                </div>
            </div>
                <h1 class="dm">@Model.Name</h1>
            </div>

            <!-- Reszta Twojego widoku -->

            <h3>Inne utwory tego wykonawcy:</h3>
            <table>
                <thead>
                    <tr>
                        <th>Utwór</th>
                        <th>Gatunek</th>
                        <th>Wykonawca</th>
                        <th>Czas Trwania</th>
                        <th>Album</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var otherTrack in Model.OtherTracksByArtist)
                    {
                        <tr>
                            <td>@otherTrack.Name</td>
                            <td>@otherTrack.Genre</td>
                            <td>@otherTrack.BandOrArtist</td>
                            <td>@otherTrack.Duration</td>
                            <td>@otherTrack.AlbumName</td>
                        </tr>
                    }
                </tbody>
            </table>




            
            </div>
    </div>

</div>
<style>
    .top{
        width: 100%;
        height: auto;
        padding: 20px;
        background-color: blueviolet;
        border-radius: 20px;
    }
    .topflex{
        display: flex;
        flex-direction: row;
        flex-wrap: nowrap;
        align-content: center;
        justify-content: space-between;
        align-items: flex-start;
        width: 100%;
    }
    .rightTop p{
        margin:0px;
    }
    .leftTop{
        width: 45%;
        height: auto;
    }
    .leftTop img{
        width: 100%;
        border-radius: 10px;
    }    
    .rightTop{
        width: 50%;
        height: auto;
    }
    table{
        width:100%;
    }
    .top h1{
        margin-top:0.5em;
        font-size:3em;
    }

    thead{
        border-bottom:1px solid white;
    }
    tr{
        height:3em;
    }

    .tag{
        background-color: #ffb200;
        border-radius: 8px;
        padding: 2px 5px;
        color: black;
        font-size: 0.7em;
    }
</style>
                  
        @section Scripts{
        <script>
        function getRandomColor() {
            // Generowanie losowego koloru w formacie RGB
            const r = Math.floor(Math.random() * 256);
            const g = Math.floor(Math.random() * 256);
            const b = Math.floor(Math.random() * 256);

            // Obliczanie jasności koloru używając wzoru percepcyjnego
            const brightness = (r * 299 + g * 587 + b * 114) / 1000;

            // Ustalanie koloru tekstu na czarny lub biały w zależności od jasności tła
            const textColor = brightness > 125 ? 'black' : 'white';

            return { color: `rgb(${r}, ${g}, ${b})`, textColor };
        }

        function setRandomTagColors() {
            const tags = document.querySelectorAll('.tag');

            tags.forEach(tag => {
                const { color, textColor } = getRandomColor();
                tag.style.backgroundColor = color;
                tag.style.color = textColor;
            });
        }

        // Wywołanie funkcji
        setRandomTagColors();

        </script>
        }