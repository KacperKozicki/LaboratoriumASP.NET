// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.13");

            modelBuilder.Entity("Data.Entities.AlbumEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BandOrArtist")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("TEXT");

                    b.Property<int>("ChartRanking")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnType("TEXT");

                    b.Property<int>("GenreId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("release_date");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.ToTable("albums");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BandOrArtist = "Artist1",
                            ChartRanking = 1,
                            Created = new DateTime(2024, 1, 1, 21, 32, 36, 270, DateTimeKind.Local).AddTicks(2783),
                            GenreId = 1,
                            Name = "Album1",
                            ReleaseDate = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            BandOrArtist = "Artist2",
                            ChartRanking = 3,
                            Created = new DateTime(2024, 1, 1, 21, 32, 36, 270, DateTimeKind.Local).AddTicks(2863),
                            GenreId = 2,
                            Name = "Album2",
                            ReleaseDate = new DateTime(2021, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            BandOrArtist = "Nature Sound Band",
                            ChartRanking = 2,
                            Created = new DateTime(2024, 1, 1, 21, 32, 36, 270, DateTimeKind.Local).AddTicks(2868),
                            GenreId = 3,
                            Name = "Echoes of Nature",
                            ReleaseDate = new DateTime(2021, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            BandOrArtist = "Galaxy Explorers",
                            ChartRanking = 1,
                            Created = new DateTime(2024, 1, 1, 21, 32, 36, 270, DateTimeKind.Local).AddTicks(2875),
                            GenreId = 4,
                            Name = "Rhythms of Space",
                            ReleaseDate = new DateTime(2022, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            BandOrArtist = "History Makers",
                            ChartRanking = 3,
                            Created = new DateTime(2024, 1, 1, 21, 32, 36, 270, DateTimeKind.Local).AddTicks(2880),
                            GenreId = 2,
                            Name = "Journey Through Time",
                            ReleaseDate = new DateTime(2020, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Data.Entities.ContactEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Birth")
                        .HasColumnType("TEXT")
                        .HasColumnName("birth_date");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Phone")
                        .HasMaxLength(12)
                        .HasColumnType("TEXT");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("contacts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Birth = new DateTime(2000, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Created = new DateTime(2024, 1, 1, 21, 32, 36, 265, DateTimeKind.Local).AddTicks(7191),
                            Email = "adam@wsei.edu.pl",
                            Name = "Adam",
                            OrganizationId = 1,
                            Phone = "127813268163",
                            Priority = 1
                        },
                        new
                        {
                            Id = 2,
                            Birth = new DateTime(1999, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Created = new DateTime(2024, 1, 1, 21, 32, 36, 265, DateTimeKind.Local).AddTicks(7326),
                            Email = "ewa@wsei.edu.pl",
                            Name = "Ewa",
                            OrganizationId = 1,
                            Phone = "293443823478",
                            Priority = 2
                        });
                });

            modelBuilder.Entity("Data.Entities.GenreEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Lorem",
                            Name = "Rock"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Lorem",
                            Name = "Jazz"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Lorem",
                            Name = "Clasic"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Lorem",
                            Name = "Pop"
                        });
                });

            modelBuilder.Entity("Data.Entities.OrganizationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("organizations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Uczelnia",
                            Name = "WSEI"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Uczelnia",
                            Name = "UJ"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Uczelnia",
                            Name = "AGH"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Firma",
                            Name = "NOKIA"
                        });
                });

            modelBuilder.Entity("Data.Entities.PlaylistEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<int>("GenreId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("TotalDuration")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.ToTable("playlists");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2005, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = 1,
                            IsPublic = true,
                            Name = "Summer Hits",
                            TotalDuration = new TimeSpan(0, 0, 8, 5, 0),
                            UserId = "75eee478-a030-489f-9e40-3ad96fbfbc1b"
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2022, 11, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = 2,
                            IsPublic = true,
                            Name = "Rock Classics",
                            TotalDuration = new TimeSpan(0, 0, 6, 10, 0),
                            UserId = "75eee478-a030-489f-9e40-3ad96fbfbc1b"
                        },
                        new
                        {
                            Id = 3,
                            Created = new DateTime(2024, 1, 1, 21, 32, 36, 271, DateTimeKind.Local).AddTicks(7100),
                            GenreId = 1,
                            IsPublic = true,
                            Name = "Morning Vibes",
                            TotalDuration = new TimeSpan(0, 0, 10, 0, 0),
                            UserId = "b327fc8b-827d-4a4b-bbe1-bdb624302eb3"
                        },
                        new
                        {
                            Id = 4,
                            Created = new DateTime(2024, 1, 1, 21, 32, 36, 271, DateTimeKind.Local).AddTicks(7134),
                            GenreId = 4,
                            IsPublic = false,
                            Name = "Workout Energy",
                            TotalDuration = new TimeSpan(0, 0, 8, 20, 0),
                            UserId = "2229335b-be2d-4825-a55f-c91252bb6cb2"
                        });
                });

            modelBuilder.Entity("Data.Entities.PlaylistTagEntity", b =>
                {
                    b.Property<int>("PlaylistId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TagId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PlaylistId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("playliststag");

                    b.HasData(
                        new
                        {
                            PlaylistId = 1,
                            TagId = 7
                        },
                        new
                        {
                            PlaylistId = 1,
                            TagId = 19
                        },
                        new
                        {
                            PlaylistId = 1,
                            TagId = 20
                        },
                        new
                        {
                            PlaylistId = 2,
                            TagId = 1
                        },
                        new
                        {
                            PlaylistId = 2,
                            TagId = 4
                        },
                        new
                        {
                            PlaylistId = 2,
                            TagId = 14
                        },
                        new
                        {
                            PlaylistId = 3,
                            TagId = 2
                        },
                        new
                        {
                            PlaylistId = 3,
                            TagId = 5
                        },
                        new
                        {
                            PlaylistId = 3,
                            TagId = 4
                        },
                        new
                        {
                            PlaylistId = 4,
                            TagId = 10
                        },
                        new
                        {
                            PlaylistId = 4,
                            TagId = 7
                        },
                        new
                        {
                            PlaylistId = 4,
                            TagId = 3
                        });
                });

            modelBuilder.Entity("Data.Entities.PlaylistTrackEntity", b =>
                {
                    b.Property<int>("PlaylistId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TrackId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PlaylistId", "TrackId");

                    b.HasIndex("TrackId");

                    b.ToTable("playlist_tracks");

                    b.HasData(
                        new
                        {
                            PlaylistId = 1,
                            TrackId = 1
                        },
                        new
                        {
                            PlaylistId = 1,
                            TrackId = 2
                        },
                        new
                        {
                            PlaylistId = 2,
                            TrackId = 3
                        },
                        new
                        {
                            PlaylistId = 2,
                            TrackId = 4
                        },
                        new
                        {
                            PlaylistId = 3,
                            TrackId = 7
                        },
                        new
                        {
                            PlaylistId = 3,
                            TrackId = 8
                        },
                        new
                        {
                            PlaylistId = 4,
                            TrackId = 10
                        },
                        new
                        {
                            PlaylistId = 4,
                            TrackId = 11
                        });
                });

            modelBuilder.Entity("Data.Entities.TagEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("tags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Radosny"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Spokojny"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Energetyczny"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Romantyczny"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Melancholijny"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Tęskny"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Wakacyjny"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Nostalgiczny"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Motywujący"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Relaksujący"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Imprezowy"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Na trening"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Do śpiewania"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Do tańca"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Do pracy"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Do nauki"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Do medytacji"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Inspirujący"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Do podróży"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Na dobry początek dnia"
                        });
                });

            modelBuilder.Entity("Data.Entities.TrackEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AlbumEntityId")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AlbumEntityId");

                    b.ToTable("tracks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AlbumEntityId = 1,
                            Duration = new TimeSpan(0, 0, 3, 45, 0),
                            Name = "Magical"
                        },
                        new
                        {
                            Id = 2,
                            AlbumEntityId = 1,
                            Duration = new TimeSpan(0, 0, 4, 20, 0),
                            Name = "England"
                        },
                        new
                        {
                            Id = 3,
                            AlbumEntityId = 1,
                            Duration = new TimeSpan(0, 0, 2, 55, 0),
                            Name = "Punchline"
                        },
                        new
                        {
                            Id = 4,
                            AlbumEntityId = 2,
                            Duration = new TimeSpan(0, 0, 3, 15, 0),
                            Name = "Shirtsleeves"
                        },
                        new
                        {
                            Id = 5,
                            AlbumEntityId = 2,
                            Duration = new TimeSpan(0, 0, 4, 40, 0),
                            Name = "One"
                        },
                        new
                        {
                            Id = 6,
                            AlbumEntityId = 2,
                            Duration = new TimeSpan(0, 0, 3, 30, 0),
                            Name = "The Man"
                        },
                        new
                        {
                            Id = 7,
                            AlbumEntityId = 3,
                            Duration = new TimeSpan(0, 0, 3, 0, 0),
                            Name = "Forest Whisper"
                        },
                        new
                        {
                            Id = 8,
                            AlbumEntityId = 3,
                            Duration = new TimeSpan(0, 0, 3, 30, 0),
                            Name = "Ocean Wave"
                        },
                        new
                        {
                            Id = 9,
                            AlbumEntityId = 3,
                            Duration = new TimeSpan(0, 0, 3, 20, 0),
                            Name = "Mountain Echo"
                        },
                        new
                        {
                            Id = 10,
                            AlbumEntityId = 4,
                            Duration = new TimeSpan(0, 0, 4, 0, 0),
                            Name = "Starry Night"
                        },
                        new
                        {
                            Id = 11,
                            AlbumEntityId = 4,
                            Duration = new TimeSpan(0, 0, 4, 20, 0),
                            Name = "Mystery of Nebula"
                        },
                        new
                        {
                            Id = 12,
                            AlbumEntityId = 5,
                            Duration = new TimeSpan(0, 0, 3, 10, 0),
                            Name = "Ancient Roads"
                        },
                        new
                        {
                            Id = 13,
                            AlbumEntityId = 5,
                            Duration = new TimeSpan(0, 0, 3, 40, 0),
                            Name = "Timeless Memories"
                        },
                        new
                        {
                            Id = 14,
                            AlbumEntityId = 5,
                            Duration = new TimeSpan(0, 0, 3, 0, 0),
                            Name = "Sands of History"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e62b00a8-2d92-46e3-803a-628b8d997d2f",
                            ConcurrencyStamp = "e62b00a8-2d92-46e3-803a-628b8d997d2f",
                            Name = "ADMIN",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "b371a530-8def-40d7-bb6f-eabe3482fc5d",
                            ConcurrencyStamp = "b371a530-8def-40d7-bb6f-eabe3482fc5d",
                            Name = "USER",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "0832b66e-81ac-4238-994a-39be288341d9",
                            ConcurrencyStamp = "0832b66e-81ac-4238-994a-39be288341d9",
                            Name = "ARTIST",
                            NormalizedName = "ARTIST"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "75eee478-a030-489f-9e40-3ad96fbfbc1b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0abd5016-6a17-4858-95ac-fafc2dbfaf21",
                            Email = "adam@wsei.edu.pl",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADAM@WSEI.EDU.PL",
                            NormalizedUserName = "ADAM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFh80vgRnCooj0j+HnktHkksgnMI31PI7jvvZ/F4slCcTiW4mmel1PT/pg5IFzcRXg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "386fbe5b-6b6a-4c49-bcb3-0c388d56a1f3",
                            TwoFactorEnabled = false,
                            UserName = "adam"
                        },
                        new
                        {
                            Id = "b327fc8b-827d-4a4b-bbe1-bdb624302eb3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "491574c0-f615-48a1-8279-f14a6bbd4f36",
                            Email = "julia@wsei.edu.pl",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JULIA@WSEI.EDU.PL",
                            NormalizedUserName = "JULIA",
                            PasswordHash = "AQAAAAEAACcQAAAAEOGRBunZunH0iEbLEWFMkwFBqADwzjgYQqAEfU825rCUiGohS04k7kD8Hu+LpyoT3g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "73bb6de5-f911-4588-be91-0e68578e2817",
                            TwoFactorEnabled = false,
                            UserName = "julia"
                        },
                        new
                        {
                            Id = "2229335b-be2d-4825-a55f-c91252bb6cb2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "19b453a3-ea05-41a7-8aa3-af71e6edaa6b",
                            Email = "tomek@wsei.edu.pl",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TOMEK@WSEI.EDU.PL",
                            NormalizedUserName = "TOMEK",
                            PasswordHash = "AQAAAAEAACcQAAAAEJtUpQClmducr1yayVrXkp+WBMWCrR3elF3vrwOkkl5dPqXZesXeebj1rdHc5bbuDg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2097ab36-a863-49c7-a8cc-641f0e5811b8",
                            TwoFactorEnabled = false,
                            UserName = "tomek"
                        },
                        new
                        {
                            Id = "e0ad3fb3-3fc0-43cf-993f-b1df98cd29a4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "46a36b2b-92be-4b75-9553-e3f3d09c74c3",
                            Email = "michael@wsei.edu.pl",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MICHAEL@WSEI.EDU.PL",
                            NormalizedUserName = "MICHAEL",
                            PasswordHash = "AQAAAAEAACcQAAAAELFmjT+JkP/FgEgdIeh5gP67l5F5filtjB9L/O1nbD5vMqHOoNBK/E1lHLQ2t6kmVQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "101842e1-d826-444c-839a-9e7fd9da9f9b",
                            TwoFactorEnabled = false,
                            UserName = "michael"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "75eee478-a030-489f-9e40-3ad96fbfbc1b",
                            RoleId = "e62b00a8-2d92-46e3-803a-628b8d997d2f"
                        },
                        new
                        {
                            UserId = "b327fc8b-827d-4a4b-bbe1-bdb624302eb3",
                            RoleId = "b371a530-8def-40d7-bb6f-eabe3482fc5d"
                        },
                        new
                        {
                            UserId = "2229335b-be2d-4825-a55f-c91252bb6cb2",
                            RoleId = "b371a530-8def-40d7-bb6f-eabe3482fc5d"
                        },
                        new
                        {
                            UserId = "e0ad3fb3-3fc0-43cf-993f-b1df98cd29a4",
                            RoleId = "0832b66e-81ac-4238-994a-39be288341d9"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Data.Entities.AlbumEntity", b =>
                {
                    b.HasOne("Data.Entities.GenreEntity", "Genre")
                        .WithMany("Albums")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("Data.Entities.ContactEntity", b =>
                {
                    b.HasOne("Data.Entities.OrganizationEntity", "Ogranization")
                        .WithMany("Contacts")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ogranization");
                });

            modelBuilder.Entity("Data.Entities.GenreEntity", b =>
                {
                    b.OwnsOne("Data.Models.History", "History", b1 =>
                        {
                            b1.Property<int>("GenreEntityId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("Founder")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<int>("YearOfOrigin")
                                .HasColumnType("INTEGER");

                            b1.HasKey("GenreEntityId");

                            b1.ToTable("genres");

                            b1.WithOwner()
                                .HasForeignKey("GenreEntityId");

                            b1.HasData(
                                new
                                {
                                    GenreEntityId = 1,
                                    Country = "USA",
                                    Founder = "Alan Freed",
                                    YearOfOrigin = 1951
                                },
                                new
                                {
                                    GenreEntityId = 2,
                                    Country = "USA",
                                    Founder = "Ray Charles",
                                    YearOfOrigin = 1951
                                },
                                new
                                {
                                    GenreEntityId = 3,
                                    Country = "Germany",
                                    Founder = "Johann Sebastian Bach",
                                    YearOfOrigin = 1750
                                },
                                new
                                {
                                    GenreEntityId = 4,
                                    Country = "USA",
                                    Founder = "Michael Joseph Jackson",
                                    YearOfOrigin = 1960
                                });
                        });

                    b.Navigation("History")
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Entities.OrganizationEntity", b =>
                {
                    b.OwnsOne("Data.Models.Address", "Adress", b1 =>
                        {
                            b1.Property<int>("OrganizationEntityId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("OrganizationEntityId");

                            b1.ToTable("organizations");

                            b1.WithOwner()
                                .HasForeignKey("OrganizationEntityId");

                            b1.HasData(
                                new
                                {
                                    OrganizationEntityId = 1,
                                    City = "Kraków",
                                    PostalCode = "31-150",
                                    Street = "Św. Filipa 17"
                                },
                                new
                                {
                                    OrganizationEntityId = 2,
                                    City = "Kraków",
                                    PostalCode = "31-007",
                                    Street = "Gołębia 24"
                                },
                                new
                                {
                                    OrganizationEntityId = 3,
                                    City = "Kraków",
                                    PostalCode = "31-059",
                                    Street = "al. Adama Mickiewicza 30"
                                },
                                new
                                {
                                    OrganizationEntityId = 4,
                                    City = "Kraków",
                                    PostalCode = "31-348",
                                    Street = "Michała Bobrzyńskiego 46"
                                });
                        });

                    b.Navigation("Adress")
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Entities.PlaylistEntity", b =>
                {
                    b.HasOne("Data.Entities.GenreEntity", "Genre")
                        .WithMany("Playlists")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("Data.Entities.PlaylistTagEntity", b =>
                {
                    b.HasOne("Data.Entities.PlaylistEntity", "Playlist")
                        .WithMany("PlaylistTags")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.TagEntity", "Tag")
                        .WithMany("PlaylistTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Playlist");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Data.Entities.PlaylistTrackEntity", b =>
                {
                    b.HasOne("Data.Entities.PlaylistEntity", "Playlist")
                        .WithMany("PlaylistTracks")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.TrackEntity", "Track")
                        .WithMany()
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Playlist");

                    b.Navigation("Track");
                });

            modelBuilder.Entity("Data.Entities.TrackEntity", b =>
                {
                    b.HasOne("Data.Entities.AlbumEntity", "Album")
                        .WithMany("Tracklist")
                        .HasForeignKey("AlbumEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Entities.AlbumEntity", b =>
                {
                    b.Navigation("Tracklist");
                });

            modelBuilder.Entity("Data.Entities.GenreEntity", b =>
                {
                    b.Navigation("Albums");

                    b.Navigation("Playlists");
                });

            modelBuilder.Entity("Data.Entities.OrganizationEntity", b =>
                {
                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("Data.Entities.PlaylistEntity", b =>
                {
                    b.Navigation("PlaylistTags");

                    b.Navigation("PlaylistTracks");
                });

            modelBuilder.Entity("Data.Entities.TagEntity", b =>
                {
                    b.Navigation("PlaylistTags");
                });
#pragma warning restore 612, 618
        }
    }
}
